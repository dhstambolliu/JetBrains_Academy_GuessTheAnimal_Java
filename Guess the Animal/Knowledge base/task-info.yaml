type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes
      - The program should ask a question to distinguishes a dog from a cat
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "file-formats",
                "menu"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/userInterface/WordService.java
  visible: true
  text: |-
    package animals.userInterface;

    import animals.model.Animal;
    import animals.model.Fact;

    import java.util.List;

    public class WordService {

        private static final List<Character> vowels = List.of('a', 'e', 'i', 'o', 'u');
        private final static List<String> prepositions = List.of("a", "an");


        public static Animal extractAnimal(String animalMaybeWithPreposition) {
            final String normalizedAnimalMaybeWithPreposition = normalize(animalMaybeWithPreposition);

            final String[] animalArray =
                    normalizedAnimalMaybeWithPreposition.split("\\s+", 2);

            if(animalArray.length < 2) {
                final String preposition = getPreposition(animalArray[0]);
                final String animal = normalizedAnimalMaybeWithPreposition;
                return new Animal(preposition, animal);
            } else if(isPreposition(animalArray[0])) {
                return new Animal(animalArray[0], animalArray[1]);
            } else {
                final String preposition = getPreposition(animalArray[0]);
                final String animal = normalizedAnimalMaybeWithPreposition;
                return new Animal(preposition, animal);
            }
        }

        public static Affirmation checkAffirmation(String someAffirmation) {
            return Affirmation.checkAffirmation(someAffirmation);
        }

        public static Fact extractFact(String someFact) {

            final Verb verb = Verb.extractVerb(someFact);

            final String factDescription = someFact.trim().split(" ", 3)[2]
                    .replaceAll("[.?!]+$", "");

            return new Fact(verb, factDescription);
        }

        public static boolean checkHasValidVerb(String someFact) {

            return Verb.checkHasValidVerb(someFact);
        }

        private static String getPreposition(String str){
            return isVowel(str.charAt(0)) ? prepositions.get(1) : prepositions.get(0);
        }

        private static boolean isVowel(char ch) {
            return vowels.contains(ch);
        }

        private static boolean isPreposition(String maybePreposition) {
            return prepositions.contains(maybePreposition);
        }

        private static String normalize(String str) {
            return str.trim().toLowerCase();
        }

        enum Affirmation {
            AFFIRMATIVE, NEGATIVE, NEITHER;

            private final static List<String> affirmatives =
                    List.of("y", "yes", "yeah", "yep", "sure", "right", "affirmative",
                            "correct", "indeed", "you bet", "exactly", "you said it");
            private final static List<String> negatives =
                    List.of("n", "no", "no way", "nah", "nope",
                            "negative", "i don't think so", "yeah no");

            private static boolean isAffirmative(String maybeAffirmative) {
                return affirmatives.contains(normalize(maybeAffirmative));
            }

            private static boolean isNegative(String maybeNegative) {
                return negatives.contains(normalize(maybeNegative));
            }

            private static Affirmation checkAffirmation(String someAffirmation) {
                final String normalizedAffirmation  = normalize(someAffirmation).replaceFirst("[.!?]$", "");

                if(Affirmation.isAffirmative(normalizedAffirmation)) {
                    return Affirmation.AFFIRMATIVE;
                } else if(Affirmation.isNegative(normalizedAffirmation)) {
                    return Affirmation.NEGATIVE;
                } else {
                    return Affirmation.NEITHER;
                }
            }
        }

        public enum Verb {
            CAN("can", "can't", "Can it"),
            HAS("has", "doesn't have", "Does it have"),
            IS("is", "isn't", "Is it");

            public final String positive;
            public final String negative;
            public final String question;

            Verb(String positive, String negative, String question) {
                this.positive = positive;
                this.negative = negative;
                this.question = question;
            }

            private static boolean isVerbToBe(String someFact) {
                return someFact.matches("(?i)^it is .*$");
            }

            private static boolean isVerbToHave(String someFact) {
                return someFact.matches("(?i)^it has .*$");
            }

            private static boolean isVerbToCan(String someFact) {
                return someFact.matches("(?i)^it can .*$");
            }

            private static boolean checkHasValidVerb(String someFact) {
                return someFact.matches("(?i)^it (can|has|is) .+$");
            }

            private static Verb extractVerb(String validFact) {

                if(isVerbToHave(validFact)) {
                    return HAS;
                } else if(isVerbToCan(validFact)) {
                    return CAN;
                } else if(isVerbToBe(validFact)){
                    return IS;
                } else {
                    throw new IllegalArgumentException("extractVerb received invalid fact");
                }
            }
        }
    }
  learner_created: true
- name: src/animals/service/MapperHelper.java
  visible: true
  text: |-
    package animals.service;

    import animals.model.Node;
    import com.fasterxml.jackson.annotation.JsonAutoDetect;
    import com.fasterxml.jackson.annotation.PropertyAccessor;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.json.JsonMapper;
    import com.fasterxml.jackson.dataformat.xml.XmlMapper;
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;

    import java.io.*;

    public class MapperHelper {

        private final ObjectMapper mapper;
        private final String fileName;


        public MapperHelper(String type) {
            switch(type){
                case "yaml":
                    this.mapper = new YAMLMapper();
                    this.fileName = "animals.yaml";
                    break;
                case "xml":
                    this.mapper = new XmlMapper();
                    this.fileName = "animals.xml";
                    break;
                case "json":
                default:
                    this.mapper = new JsonMapper();
                    this.fileName = "animals.json";
                    break;
            }

            mapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);

        }

        public void saveKnowledge(Node root){
            final File file = new File(fileName);
            try(final OutputStreamWriter outWriter =
                        new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(file)))
            ) {
                this.mapper
                        .writerWithDefaultPrettyPrinter()
                        .writeValue(outWriter, root);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public Node loadKnowledge(){
            try {
                return this.mapper
                        .readValue(new File(fileName), Node.class);
            } catch (IOException e) {
                e.printStackTrace();
            }

            return null;
        }
    }
  learner_created: true
- name: src/animals/testing/MainTest.java
  visible: true
  text: |-
    package animals.testing;

    import animals.Main;

    import java.util.Arrays;

    import static animals.testing.TestUtils.*;

    public class MainTest {


        public static void testParseArgs() {
            final String method = new Object(){}.getClass().getEnclosingMethod().getName();

            final String[] givenBlank = {};
            final String defaultExpected = "json";
            final String blankResult = Main.parseArgs(givenBlank);
            check(method, defaultExpected, blankResult, Arrays.toString(givenBlank));

            final String[] correctYaml = {"-type", "yaml"};
            final String yamlExpected = "yaml";
            final String yamlResult = Main.parseArgs(correctYaml);
            check(method, yamlExpected, yamlResult, Arrays.toString(correctYaml));

            final String[] incorrectYaml = {"yaml"};
            final String incorrectYamlResult = Main.parseArgs(incorrectYaml);
            check(method, defaultExpected, incorrectYamlResult, Arrays.toString(incorrectYaml));

            final String[] correctXml = {"a", "b", "-type", "xml"};
            final String xmlExpected = "xml";
            final String xmlResult = Main.parseArgs(correctXml);
            check(method, xmlExpected, xmlResult, Arrays.toString(correctXml));





        }


    }
  learner_created: true
- name: src/animals/utils/Pair.java
  visible: true
  text: |-
    package animals.utils;

    public class Pair<H, T> {
        public final H head;
        public final T tail;

        public Pair(H head, T tail) {
            this.head = head;
            this.tail = tail;
        }
    }
  learner_created: true
- name: src/animals/userInterface/Sentences.java
  visible: true
  text: |-
    package animals.userInterface;

    import animals.model.Animal;
    import animals.model.Distinction;
    import animals.utils.Pair;
    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;
    import java.util.function.Predicate;

    import static animals.userInterface.WordService.Affirmation;


    public class Sentences {

        public static final String queryAnimal = "Enter an animal:";
        public static final String queryFirstAnimal = "Enter the first animal:";
        public static final String querySecondAnimal = "Enter the second animal:";
        public static final String reQueryFactExamples = "The examples of a statement:\n" +
                " - It can fly\n" +
                " - It has horn\n" +
                " - It is a mammal";
        public static final String youThinkOfAnAnimal = "You think of an animal, and I guess it.";
        public static final String pressEnterWhenReady = "Press enter when you're ready.";
        public static final String iWantToLearnAnimals = "I want to learn about animals.";
        public static final String whichAnimalFavorite = "Which animal do you like most?";
        public static final String learnedSoMuch = "Wonderful! I've learned so much about animals!";
        public static final String letsPlay = "Let's play a game!";
        public static final String iWon = "I won!";
        public static final String iGiveUp = "I give up. What animal do you have in mind?";
        public static final String wannaPlayAgain = "Would you like to play again?";
        public static final String playAgainEnthusiasm = "Ow yes!";

        private static final String confirmAnimalTemplate = "Is it %s?";
        private static final String answerTemplate = "You answered: %s";
        private static final String specifyFactQueryTemplate = "Specify a fact that distinguishes %s from %s.%n" +
                "The sentence should be of the format: 'It can/has/is ...'.";
        private static final String isItCorrectForQueryTemplate = "Is the statement correct for %s?";

        private static final String iHaveLearnedAffirmationTemplate = "I have learned the following facts about animals:%n" +
                "- %s%n" +
                "- %s";
        private static final String factLearnedTemplate = "The %s %s.";

        private static final String iCanDistinguishAffirmationTemplate = "I can distinguish these animals by asking the question:%n" +
                "- %s";

        private static final String yes = "Yes";
        private static final String no = "No";
        private static final List<String> reQuerySentences =
                List.of(
                        "I'm not sure I caught you: was it yes or no?",
                        "Funny, I still don't understand, is it yes or no?",
                        "Oh, it's too complicated for me: just tell me yes or no.",
                        "Could you please simply say yes or no?",
                        "Oh, no, don't try to confuse me: say yes or no."
                );
        private static final List<String> goodbyeMessages =
                List.of(
                        "Bye!",
                        "See you soon!",
                        "Have a nice day!",
                        "See you the next time",
                        "Talk to you later",
                        "Au revoir",
                        "Arrivederci",
                        "Falou ae, é nois",
                        "Adios",
                        "Te visurum",
                        "Vi ses"
                );
        private static final Random random = new Random();



        public static String getGreeting() {
            return Greetings.getGreeting();
        }

        public static String getConfirmAnimalQuery(String animal) {

            return String.format(confirmAnimalTemplate, animal);
        }

        public static String getConfirmationReQuery(){
            final int sentenceIndex = random.nextInt(reQuerySentences.size());
            return reQuerySentences.get(sentenceIndex);
        }

        public static String getGoodbye() {
            final int sentenceIndex = random.nextInt(goodbyeMessages.size());
            return goodbyeMessages.get(sentenceIndex);
        }

        public static String getAnswer(WordService.Affirmation affirmation) {
            if(affirmation == WordService.Affirmation.AFFIRMATIVE) {
                return String.format(answerTemplate, yes);
            } else if(affirmation == WordService.Affirmation.NEGATIVE) {
                return String.format(answerTemplate, no);
            } else {
                throw new IllegalArgumentException(
                        "affirmation on getAnswer could be only " +
                                "affirmative or negative, but was neither");
            }
        }

        public static String getSpecifyFactQueryTemplate(Animal firstAnimal, Animal secondAnimal) {
            return String.format(
                    specifyFactQueryTemplate,
                    firstAnimal.getNameWithPreposition(),
                    secondAnimal.getNameWithPreposition()
            );
        }

        public static String getIsItCorrectForQueryTemplate(Animal secondAnimal) {
            return String.format(
                    isItCorrectForQueryTemplate,
                    secondAnimal.getNameWithPreposition()
            );
        }

        public static String getConclusions(Distinction distinction, Affirmation isPositiveForSecondAnimal) {
            final String affirmation = distinction.fact.getPositiveAffirmation();
            final String negation = distinction.fact.getNegativeAffirmation();
            final Animal positiveAnimal = (Animal) distinction.positiveForFact;
            final Animal negativeAnimal = (Animal) distinction.negativeForFact;

            final String positiveAnimalStr = String.format(
                    factLearnedTemplate, positiveAnimal.name, affirmation
            );
            final String negativeAnimalStr = String.format(
                    factLearnedTemplate, negativeAnimal.name, negation
            );

            final String firstFactLearned =
                    isPositiveForSecondAnimal == Affirmation.AFFIRMATIVE ? negativeAnimalStr :positiveAnimalStr;
            final String secondFactLearned =
                    isPositiveForSecondAnimal == Affirmation.AFFIRMATIVE ? positiveAnimalStr :negativeAnimalStr;

            final String factsLearned =
                    String.format(iHaveLearnedAffirmationTemplate, firstFactLearned, secondFactLearned);
            final String canDistinguishBy =
                    String.format(iCanDistinguishAffirmationTemplate, distinction.fact.getQuestion());

            return String.format("%s%n%s", factsLearned, canDistinguishBy);
        }

        private static class Greetings {
            static final String morning = "Good morning!";
            static final String afternoon = "Good afternoon!";
            static final String evening = "Good evening!";
            static final String lateHours = "Hi, night owl!";


            static final List<Pair<Predicate<Integer>, String>> testsList =
                    List.of(
                            new Pair<>(Greetings::isMorning, morning),
                            new Pair<>(Greetings::isAfternoon, afternoon),
                            new Pair<>(Greetings::isEvening, evening),
                            new Pair<>(Greetings::isLateHours, lateHours)
                    );

            static String getGreeting(){
                final LocalTime time = LocalTime.now();
                final int currentHour = time.getHour();
                return testsList.stream()
                        .filter(pair -> pair.head.test(currentHour))
                        .findFirst()
                        .orElse(new Pair<>(x -> true, "You are out of the time dimension! NICE!!!"))
                        .tail;
            }

            static private boolean isMorning(int currentHour) {
                return currentHour >= 5 && currentHour <= 12;
            }

            static private boolean isAfternoon(int currentHour) {
                return currentHour > 12 && currentHour <= 18;
            }

            static private boolean isEvening(int currentHour) {
                return currentHour > 18 ;
            }

            static private boolean isLateHours(int currentHour) {
                return currentHour < 5;
            }
        }

    }
  learner_created: true
- name: src/animals/model/Animal.java
  visible: true
  text: |-
    package animals.model;

    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    @JsonTypeName("animal")
    public class Animal implements Node {

        @JsonProperty("name")
        public final String name;

        @JsonProperty("preposition")
        private final String preposition;

        @JsonCreator
        public Animal(@JsonProperty("preposition") String preposition,
                      @JsonProperty("name") String name) {

            this.preposition = preposition;
            this.name = name;
        }

        @JsonIgnore
        public String getNameWithPreposition() {
            return String.format("%s %s", preposition, name);
        }

        @JsonIgnore
        @Override
        public boolean isLeaf() {
            return true;
        }
    }
  learner_created: true
- name: src/animals/testing/WordServiceTests.java
  visible: true
  text: |-
    package animals.testing;

    import animals.model.Fact;
    import animals.userInterface.WordService;

    import static animals.userInterface.WordService.Verb;
    import static animals.testing.TestUtils.*;

    public class WordServiceTests {

        public static void testCheckFact() {
            final String method = new Object() {
            }.getClass().getEnclosingMethod().getName();

            final String given = "It can climb trees.";
            final boolean expected = true;
            final boolean result = WordService.checkHasValidVerb(given);
            check(method, expected, result, given);

            final String given2 = "It has a horn";
            final boolean expected2 = true;
            final boolean result2 = WordService.checkHasValidVerb(given2);
            check(method, expected2, result2, given2);

            final String given3 = "It is a shy animal";
            final boolean expected3 = true;
            final boolean result3 = WordService.checkHasValidVerb(given3);
            check(method, expected3, result3, given3);

            final String given4 = "Is it a mammal?";
            final boolean expected4 = false;
            final boolean result4 = WordService.checkHasValidVerb(given4);
            check(method, expected4, result4, given4);

            final String given5 = "It is a mammal?";
            final boolean expected5 = true;
            final boolean result5 = WordService.checkHasValidVerb(given5);
            check(method, expected5, result5, given5);

        }

        public static void testExtractFact() {
            final String method = new Object() {
            }.getClass().getEnclosingMethod().getName();

            final String given = "It can climb trees.";
            final Fact expected = new Fact(Verb.CAN, "climb trees");
            final Fact result = WordService.extractFact(given);
            check(method, expected, result, given);


            final String given2 = "It has a horn";
            final Fact expected2 = new Fact(Verb.HAS, "a horn");
            final Fact result2 = WordService.extractFact(given2);
            check(method, expected2, result2, given2);

            final String given3 = "It is a shy animal";
            final Fact expected3 = new Fact(Verb.IS, "a shy animal");
            final Fact result3 = WordService.extractFact(given3);
            check(method, expected3, result3, given3);

            final String given4 = "It is a mammal?";
            final Fact expected4 = new Fact(Verb.IS, "a mammal");
            final Fact result4 = WordService.extractFact(given4);
            check(method, expected4, result4, given4);

        }


    }
  learner_created: true
- name: src/animals/model/Fact.java
  visible: true
  text: |-
    package animals.model;

    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.Objects;

    import static animals.userInterface.WordService.Verb;

    public class Fact {

        @JsonProperty("description")
        public final String description;

        @JsonProperty("verb")
        public final Verb verb;

        @JsonCreator
        public Fact(@JsonProperty("verb") Verb verb,
                    @JsonProperty("description") String description) {
            this.verb = verb;
            this.description = description;
        }

        @JsonIgnore
        public String getPositiveAffirmation(){
            return verb.positive + " " + description;
        }

        @JsonIgnore
        public String getNegativeAffirmation(){
            return verb.negative + " " + description;
        }

        @JsonIgnore
        public String getQuestion(){
            return verb.question + " " + description + "?";
        }

        @Override
        public boolean equals(Object other) {
            if (this == other) return true;
            if (other == null || getClass() != other.getClass()) return false;
            Fact fact = (Fact) other;
            return description.equals(fact.description) &&
                    verb == fact.verb;
        }

        @Override
        public int hashCode() {
            return Objects.hash(description, verb);
        }
    }
  learner_created: true
- name: src/animals/model/Node.java
  visible: true
  text: |-
    package animals.model;

    import com.fasterxml.jackson.annotation.JsonSubTypes;
    import com.fasterxml.jackson.annotation.JsonTypeInfo;

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    @JsonSubTypes({@JsonSubTypes.Type(value = Distinction.class, name = "distinction"),
            @JsonSubTypes.Type(value = Animal.class, name = "animal")})
    public interface Node {

        public boolean isLeaf();
    }
  learner_created: true
- name: src/animals/model/Distinction.java
  visible: true
  text: |-
    package animals.model;

    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    @JsonTypeName("distinction")
    public class Distinction implements Node {

        @JsonProperty("fact")
        public final Fact fact;

        @JsonProperty("positiveForFact")
        public final Node positiveForFact;

        @JsonProperty("negativeForFact")
        public final Node negativeForFact;

        @JsonCreator
        public Distinction(@JsonProperty("fact") Fact fact,
                           @JsonProperty("positiveForFact") Node positiveForFact,
                           @JsonProperty("negativeForFact")Node negativeForFact) {

            this.fact = fact;
            this.positiveForFact = positiveForFact;
            this.negativeForFact = negativeForFact;
        }

        @JsonIgnore
        @Override
        public boolean isLeaf() {
            return false;
        }

        @JsonIgnore
        public Distinction addPositive(Distinction positiveForFact) {
            return new Distinction(fact, positiveForFact, negativeForFact);
        }

        @JsonIgnore
        public Distinction addNegative(Distinction negativeForFact) {
            return new Distinction(fact, positiveForFact, negativeForFact);
        }



    }
  learner_created: true
- name: src/animals/userInterface/UI.java
  visible: true
  text: |-
    package animals.userInterface;

    import animals.model.Animal;
    import animals.model.Distinction;
    import animals.model.Fact;
    import animals.model.Node;
    import animals.service.MapperHelper;

    import static animals.userInterface.WordService.Affirmation;
    import static animals.userInterface.WordService.extractAnimal;

    import java.util.Scanner;

    public class UI {
        final Scanner scanner = new Scanner(System.in);
        final MapperHelper mapper;

        public UI(String type) {
            this.mapper = new MapperHelper(type);
        }

        public void start(){
            /* mutating */ Node root = initRoutine();


            while(true) {

                println(Sentences.youThinkOfAnAnimal);
                println(Sentences.pressEnterWhenReady);
                getInput();

                root = game(root);

                wannaPlayAgain(root);
            }



        }

        private Node initRoutine(){

            final Node root = mapper.loadKnowledge();

            if(root != null) {
                return root;
            } else {
                return getFavoriteAnimal();
            }


        }

        private Animal getFavoriteAnimal(){
            println(Sentences.getGreeting());
            println("");

            println(Sentences.iWantToLearnAnimals);
            println(Sentences.whichAnimalFavorite);

            final String inputAnimal = getInput();
            println(Sentences.learnedSoMuch);
            println(Sentences.letsPlay);
            return WordService.extractAnimal(inputAnimal);
        }

        private Node game(Node node){
            if(node.isLeaf()) {
                final Animal guessAnimal = (Animal) node;
                println(Sentences.getConfirmAnimalQuery(guessAnimal.getNameWithPreposition()));
                final Affirmation affirmation = getValidConfirmation();

                if(affirmation == Affirmation.AFFIRMATIVE) {
                    println(Sentences.iWon);
                    return node;
                } else {
                    println(Sentences.iGiveUp);
                    final String newAnimalStr = getInput();
                    final Animal newAnimal = extractAnimal(newAnimalStr);
                    final Fact fact = getValidFact(guessAnimal, newAnimal);

                    println(Sentences.getIsItCorrectForQueryTemplate(newAnimal));
                    final Affirmation isPositiveForSecondAnimal = getValidConfirmation();
                    final Distinction distinction = getDistinction(isPositiveForSecondAnimal, guessAnimal, newAnimal, fact);
                    println(Sentences.getConclusions(distinction, isPositiveForSecondAnimal));
                    println(Sentences.learnedSoMuch);

                    return distinction;
                }


            } else {
                final Distinction guessDistinction = (Distinction) node;
                println(guessDistinction.fact.getQuestion());
                final Affirmation affirmation = getValidConfirmation();

                if(affirmation == Affirmation.AFFIRMATIVE) {
                    return new Distinction(guessDistinction.fact,
                            game(guessDistinction.positiveForFact),
                            guessDistinction.negativeForFact);
                } else {
                    return new Distinction(guessDistinction.fact,
                            guessDistinction.positiveForFact,
                            game(guessDistinction.negativeForFact));
                }

            }

        }

        private void wannaPlayAgain(Node root){
            println("");
            println(Sentences.wannaPlayAgain);
            final Affirmation affirmation = getValidConfirmation();

            if(affirmation == Affirmation.NEGATIVE) {
                mapper.saveKnowledge(root);
                println("");
                println(Sentences.getGoodbye());
                System.exit(0);
            } else {
                println(Sentences.playAgainEnthusiasm);
                println("");
            }
        }



        private Fact getValidFact(Animal firstAnimal, Animal secondAnimal) {
            println(Sentences.getSpecifyFactQueryTemplate(firstAnimal, secondAnimal));
            final String factStr = getInput();
            final boolean isFact = WordService.checkHasValidVerb(factStr);

            if(isFact) {
                return WordService.extractFact(factStr);
            } else {
                println(Sentences.reQueryFactExamples);
                return getValidFact(firstAnimal, secondAnimal);
            }
        }

        private Affirmation getValidConfirmation(){

            final String inputAnswer = getInput();
            final Affirmation affirmation = WordService.checkAffirmation(inputAnswer);

            if(affirmation != Affirmation.NEITHER) {
                return affirmation;
            } else {
                final String confirmationReQuery = Sentences.getConfirmationReQuery();
                println(confirmationReQuery);
                return getValidConfirmation();
            }

        }

        private Distinction getDistinction(Affirmation affirmation, Animal firstAnimal, Animal secondAnimal, Fact fact){
            final boolean isSecondAnimalPositiveForFact = affirmation == Affirmation.AFFIRMATIVE;

            final Animal positiveForFact = isSecondAnimalPositiveForFact ? secondAnimal : firstAnimal;
            final Animal negativeForFact = isSecondAnimalPositiveForFact ? firstAnimal : secondAnimal;

            return new Distinction(fact, positiveForFact, negativeForFact);
        }


        /**
         * @deprecated migrated to game() on task3
         */
        public void getFactRoutine() {
            println(Sentences.getGreeting());
            println("");

            println(Sentences.queryFirstAnimal);
            final String firstAnimalStr = getInput();
            final Animal firstAnimal = WordService.extractAnimal(firstAnimalStr);

            println(Sentences.querySecondAnimal);
            final String secondAnimalStr = getInput();
            final Animal secondAnimal = WordService.extractAnimal(secondAnimalStr);


            final Fact fact = getValidFact(firstAnimal, secondAnimal);

            println(Sentences.getIsItCorrectForQueryTemplate(secondAnimal));
            final Affirmation isPositiveForSecondAnimal = getValidConfirmation();
            final Distinction distinction = getDistinction(isPositiveForSecondAnimal, firstAnimal, secondAnimal, fact);

            println(Sentences.getConclusions(distinction, isPositiveForSecondAnimal));
            println("");

            println(Sentences.getGoodbye());

        }


        /**
         * @deprecated migrated to getFactRoutine() on task2
         */
        @Deprecated
        private void getAnimalRoutine() {
            println(Sentences.getGreeting());

            println(Sentences.queryAnimal);
            final String inputAnimal = getInput();
            final Animal animal = WordService.extractAnimal(inputAnimal);

            final String confirmationMessage = Sentences.getConfirmAnimalQuery(animal.getNameWithPreposition());

            println(confirmationMessage);
            final WordService.Affirmation affirmation = getValidConfirmation();

            final String answer = Sentences.getAnswer(affirmation);
            println(answer);

            final String goodbyeMessage = Sentences.getGoodbye();
            println(goodbyeMessage);
            System.exit(0);
        }



        //////////////////////////////....UI private utils......///////////////////////////////////////////////

        private void println(Object any) {
            System.out.println(any.toString());
        }

        private String getInput() {
            return scanner.nextLine();
        }
    }
  learner_created: true
- name: src/animals/testing/TestUtils.java
  visible: true
  text: |-
    package animals.testing;

    public class TestUtils {

        static <T> void check(String method, T expected, T result, String tested){
            if(!expected.equals(result)) {
                throw new AssertionError(method + " failed test: " + tested);
            } else {
                System.out.println(method + " passed test: " + tested);
            }
        }
    }
  learner_created: true
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes

        yes
        no
        fox
        it is living in the forest
        yes
        yes

        yes
        no
        no
        dog
        it can climb trees
        no
        yes

        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes

        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "11"
      - "6"
      - "5"
      - "4"
      - "1"
      - "3"
  learner_created: false
- name: src/animals/AnimalGuesser.java
  visible: true
  learner_created: true
- name: src/animals/node/Node.java
  visible: true
  learner_created: true
- name: src/animals/node/Fact.java
  visible: true
  learner_created: true
- name: src/animals/node/Animal.java
  visible: true
  learner_created: true
- name: src/animals/util/PersistenceUtils.java
  visible: true
  learner_created: true
- name: src/animals/util/GrammarUtils.java
  visible: true
  learner_created: true
- name: src/animals/node/Statement.java
  visible: true
  learner_created: true
- name: src/animals/util/PhraseGenerator.java
  visible: true
  learner_created: true
- name: src/animals/util/AnswerType.java
  visible: true
  learner_created: true
- name: src/animals/TreeStatistic.java
  visible: true
  learner_created: true
- name: animals.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11083#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 07 Mar 2022 11:50:51 UTC
record: 5
